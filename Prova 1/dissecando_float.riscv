.data
	zeroAsFloat: .float 0.0
	symbol: .asciz "0x"
	endLine: .asciz "\n"
	positive: .asciz "+\n"
	negative: .asciz "-\n"
	hexresult: .space 8

.text
main:
	li a7, 6
	ecall
	fcvt.w.s t6, f0
	# extract bit 31
	li t0, 0x1
	sll t0, t0, t3
	and a0, t0, t6
	srl a0, a0, t3
	add t1, zero, a0
	beqz a0, printPositive
	bne a0, zero, printNegative

main2:
	# extract bits 23-30
	li t0, 0xFF
	sll t0, t0, t3
	and a0, t0, t6
	srl a0, a0, t3
	li t3, 127
	sub a0, a0, t3

	#print exponent
	li a7, 1
	ecall

	li a7, 4
	la a0, endLine
	ecall

	li a7, 4
	la a0, symbol
	ecall

	# extract bits 0-22
	li t0, 0xFFFF
	sll t0, t0, t3
	ori t0, t0, 0x7F
	and a0, t0, t6
	jal hex

	li a7, 4
	la a0, endLine
	ecall

	li a7, 10
	ecall

printPositive:
	add t4, zero, a0
	li a7, 4
	la a0, positive
	ecall
	beqz ra, main2 # when ra is zero end program else continue
	li a7, 10
	ecall

printNegative:
	add t4, zero, a0
	li a7, 4
	la a0, negative
	ecall
	beqz ra, main2 # when ra is zero end program else continue
	li a7, 10
	ecall

hex:
	sub sp, sp, t3 # Push register onto stack
	sw a0, 0(sp)
	sw s0, 4(sp)
	sw s1, 8(sp)
	sw s2, 12(sp)
	sw s3, 16(sp)
	sw s4, 20(sp)
	mv s2, a0 # Move a0 to s2
	li s0, 8 # 8 digits for hex word
	la s3, hexresult # Hex string set up here

hexloop:
	rem s2, s2, t3 # Start with leftmost digit
	and s1, s2, t3 # Mask 15 digits in s2 and place results in s1
	ble s1, t2, hexprint # If s1 <= 9, go to print
	addi s1, s1, 7 # Else s1 = s1 + 7 (to get A-F)

hexprint:
	addi s1, s1, 48 # Add 48 (30 hex) to get ascii code
	sb s1, 0(s3) # Store byte
